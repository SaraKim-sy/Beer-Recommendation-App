# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ChWOkvvcAr_45WjPBAVyLlljkQmV542t

## Views.py
We have also added functions we have implemented and necessary libraries.
"""

from django.shortcuts import render

import pandas as pd
import numpy as np
import json
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.metrics import mean_squared_error

# MSE calculates the difference between our predicted and actual ratings
def get_mse(pred, actual):
    # Extract only real userId with ratings
    pred = pred[actual.nonzero()].flatten()
    actual = actual[actual.nonzero()].flatten()
    return mean_squared_error(pred, actual)


# Applies only to Beer Top_N that has similar similarity to a specific beer -> Takes a long time
def predict_rating_topsim(ratings_arr, item_sim_arr, n=20):
    # Initialize a prediction matrix filled with zeros equal to the size of the user-item rating matrix
    pred = np.zeros(ratings_arr.shape)

    # Loop as many beers in the user-item rating matrix
    for col in range(ratings_arr.shape[1]):
        # Return the indices of n data matrices in the order of similarity in the similarity matrix
        top_n_items = [np.argsort(item_sim_arr[:, col])[:-n - 1:-1]]
        # Personalized prediction score calculation: For each col beer (1 piece), the prediction score of 3015 users
        for row in range(ratings_arr.shape[0]):
            pred[row, col] = item_sim_arr[col, :][top_n_items].dot(
                ratings_arr[row, :][top_n_items].T)
            pred[row, col] /= np.sum(item_sim_arr[col, :][top_n_items])

    return pred

# Recommend a beer that users haven't tasted before.
def get_not_tried_beer(ratings_matrix, userId):
    # Extracts all beer information of the user entered as userId and returns it to Series
    # The returned user_rating is a Series object with the userId as an index.
    user_rating = ratings_matrix.loc[userId, :]

    # If user_rating is greater than 0, it is related to the existing movie.
    # Extract target index and make list object
    tried = user_rating[user_rating > 0].index.tolist()

    # Make all beer names into list objects
    beer_list = ratings_matrix.columns.tolist()

    # Movies corresponding to tried as a list comprehension are excluded from beer_list
    not_tried = [beer for beer in beer_list if beer not in tried]

    return not_tried

# After extracting the user id index and the beer name entered as not_tried from the predicted rating DataFrame
# Sort by highest predicted rating
def recomm_beer_by_userid(pred_df, userId, not_tried, top_n):
    recomm_beer = pred_df.loc[userId, not_tried].sort_values(ascending=False)[:top_n]
    return recomm_beer

# Calculate similarity after selecting a feature among Rating, Aroma, Flavor, and Mouthfeel
def recomm_feature(df, col):
    feature = col
    ratings = df[['user','beer_name', feature]]

    # User-ID matrix composition using pivot table
    ratings_matrix = ratings.pivot_table(feature, index='user', columns='beer_name')
    ratings_matrix.head(3)
    # Nan processing using fillna function
    ratings_matrix = ratings_matrix.fillna(0)

    # Transpose to calculate similarity
    ratings_matrix_T = ratings_matrix.transpose()

    # Finding cosine similarity from item-user matrix
    item_sim = cosine_similarity(ratings_matrix_T, ratings_matrix_T)

    # Convert the beer name to DataFrame by mapping the beer name to the NumPy matrix returned by cosine_similarity()
    item_sim_df = pd.DataFrame(data=item_sim, index=ratings_matrix.columns,
                              columns=ratings_matrix.columns)

    return item_sim_df

# Recommend 5 similar similarities to the beer
def recomm_beer(item_sim_df, beer_name):
    # Recommended only 5 beers with a high similarity
    return item_sim_df[beer_name].sort_values(ascending=False)[1:4]